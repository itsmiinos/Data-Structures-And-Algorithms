# Last updated: 8/22/2025, 12:20:33 AM
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        self.parent = [None]*len(graph)
        self.rank = [1]*len(graph)

        for i in range(len(self.parent)) : 
            self.parent[i] = i

        edges = self.createEdges(graph)

        for u , v in edges : 
            self.findUnion(u,v)

        size = [0]*len(graph)

        for i in range(len(size)) : 
            p = self.findParent(i)
            size[p] +=1
        
        infected = [0]*len(graph)

        for i in range(len(initial)) : 
            e = initial[i]
            parent_e = self.findParent(e)
            infected[parent_e] +=1
        
        ans = min(initial)
        max_saved = -1

        for i in range(len(initial)) : 
            e = self.findParent(initial[i])
            count_infect = infected[e]
            if count_infect == 1:
                if size[e] > max_saved or (size[e] == max_saved and initial[i] < ans):
                    max_saved = size[e]
                    ans = initial[i]
        
        return ans

    
    def findUnion(self , u : int , v : int) -> None : 

        parent_u = self.findParent(u)
        parent_v = self.findParent(v)

        if parent_u == parent_v : 
            return
        
        else : 

            if self.rank[parent_u] > self.rank[parent_v] : 
                self.parent[parent_v] = parent_u
            
            elif self.rank[parent_v] > self.rank[parent_u] :
                self.parent[parent_u] = parent_v
            
            else : 
                self.parent[parent_u] = parent_v
                self.rank[parent_v] +=1

    
    def findParent(self , x : int) -> int : 
        if self.parent[x] == x :
            return x
        
        temp = self.findParent(self.parent[x])
        self.parent[x] = temp
        return temp
    

    def createEdges(self , graph : list[list[int]] ) -> list[list[int]] :

        edges = []

        for i in range(len(graph)) : 
            for j in range (len(graph[i])) : 
                if graph[i][j] == 1 : 
                    edges.append([i , j])
        
        return edges