# Last updated: 8/24/2025, 10:41:10 PM
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        visited = [-1]*len(graph)
        for i in range(len(visited)) : 
            if visited[i] == -1 :
                visited[i] = 0 
                if self.doDFS(graph , visited , i , -1) == False : 
                    return False

        return True


    def doDFS(self , graph : list[list[int]] , visited : list[int] , node : int , parent : int) -> bool : 

        nbrs = graph[node]

        for n in nbrs : 
            if visited[n] == 1 - visited[node] :
                continue
            elif visited[n] == visited[node] : 
                return False
            elif visited[n] == -1 : 
                visited[n] = 1 - visited[node]
                if not self.doDFS(graph , visited , n , node):
                    return False
        
        return True

    
